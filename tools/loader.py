#Author: Anderson Zudio & Carlos Thadeu
#Version: 1.0
#Date: 9 de fevereiro de 2023
#Esta é uma modificação do módulo loader.py para executar neste trabalho de T-admissibilidade.
#Comentários originais:
#This module does nothing by itself. This is part of execution-battery.py and execution-battery-analyser.py. 

#--Description--
#This script contains the necessary auxiliary functions and variables to load the following dependencies of both execution battery modules based on the problem at hand:
#Identify input, output, and error file extensions;
#Provide a function that read a solution from a file object;
#Provide a function that compare two solutions that have been read with the function above;
#Provide a function that tells if a solution that have been read with th ise functio above is invalid;
#Provide a function that tells the column names (header) of the result table (summary);
#Provide a function that extract the info for the result table based on a solution list. The info should be sorted accordingly based on the header.

#--Usage--
#This shouldn't contain code that executes by itself. It should provide a "load" function that receives a problem acronym to return a dict with the following information:
# "read_function": function  -- A function that can read a solution from a file object.
# "compare_function": function -- A function that compare two input solutions to answer if the first is stritcly better than the second.
# "check_function": function -- Answers if the solution is invalid. Every invalid solution should be ignored. If you're the responsible for the application that solves the problem at hand, it is recommended to check solution validity in the solver itself and register it on the solution file, therefore this function will only reflect the information that is on the file.
# "header_function": function -- The column table summary that should appear in the output of the analyzer. See the analyzer tool for details.
# "entry_function": function -- The function that computes an entry of the table generated by the analyzer. See the analyzer tool for details.
# "in_extension": string -- The extension of an instance file of the problem at hand.
# "out_extension": string -- The extension of a solution file of the problem at hand.
# "err_extension": string -- An extension that should be used for the stderr output of the application being executed.
# "bks_extension": string -- An extension that should be used for the best known solution maintance. See the execution battery tool for details.
#If the user need to insert a new problem into the project, this is the only tool that should be modified.
#Any class below can be modified. They serve as examples.

import statistics

class TadmissLoader: #Contains the definition of every dependency of the T-admissibility problem. 
    in_extension = ".txt"
    out_extension = ".out.txt"
    err_extension = ".err.txt"
    bks_extension = ".bks.txt"

    #Receives an object file. Should output a solution representation that can be read in the remaining funcitons.
    @staticmethod
    def tadmissReadSolution(solution_file):
        instance = solution_file.readline().rstrip().split('=')[1].lstrip()
        solution_type = solution_file.readline().rstrip().split('=')[1].lstrip()
        num_vertices = solution_file.readline().rstrip().split('=')[1].lstrip()
        num_edges = solution_file.readline().rstrip().split('=')[1].lstrip()
        lower_bound = solution_file.readline().rstrip().split('=')[1].lstrip()
        stretch_index = solution_file.readline().rstrip().split('=')[1].lstrip()
        sum_trees = solution_file.readline().rstrip().split('=')[1].lstrip()
        running_time = solution_file.readline().rstrip().split('=')[1].lstrip()
        threads = solution_file.readline().rstrip().split('=')[1].lstrip()
        solution = {
            "instance" : instance,
            "solution_type" : solution_type,
            "num_vertices" : num_vertices,
            "num_edges" : num_edges,
            "lower_bound" : lower_bound,
            "stretch_index" : stretch_index,
            "sum_trees" : sum_trees,
            "running_time" : running_time,
            "threads" : threads 
        };
        return solution

    #Receive two solutions as input. Should return if the first one is strictly better than the second.
    @staticmethod
    def tadmissCompare(solution, bks):
        if(int(solution["stretch_index"]) < int(bks["stretch_index"])):
            return True
        else:
            return False

    #Receive a solution. Should return True if it's valid, False otherwise.
    @staticmethod
    def tadmissCheckSolution(solution):
        return (int(solution["stretch_index"]) < 10000)

    #Return the header (column names) of the summary table. The info has to be properly sorted.
    @staticmethod
    def tadmissHeader():
        return ['Avg running time (s) (MIN/MAX) [std_dev]', 'Avg stretch index (MIN/MAX) [std_dev]', '#Vertex', '#Edges', 'Lower Bound', 'Total trees']

    #Receive a solution list. Should output the info for the result table. This info has to be in the same order as the header given above.
    @staticmethod
    def tadmissAddEntry(solution_list):
        running_time = []
        stretch_index = []
        n_vertex = int(solution_list[0]["num_vertices"])
        n_edge = int(solution_list[0]["num_edges"])
        lower_bound = int(solution_list[0]["lower_bound"])
        total_trees = int(solution_list[0]["sum_trees"])

        for solution in solution_list:
            running_time.append(float(solution["running_time"]))
            stretch_index.append(int(solution["stretch_index"]))

        running_time_avg = round(statistics.mean(running_time), 6)
        running_time_min = round(min(running_time), 6)
        running_time_max = round(max(running_time), 6)
        stretch_index_avg = round(statistics.mean(stretch_index), 1)
        stretch_index_min = min(stretch_index)
        stretch_index_max = max(stretch_index)

        if(len(solution_list) > 1):
            running_time_dev = round(statistics.stdev(running_time), 6)
            stretch_index_dev = round(statistics.stdev(stretch_index), 1)
        else:
            running_time_dev = 0
            stretch_index_dev = 0



        return [str(running_time_avg) + ' (' + str(running_time_min) + '/' + str(running_time_max) + ') [' + str(running_time_dev) + ']', str(stretch_index_avg) + ' (' + str(stretch_index_min) + '/' + str(stretch_index_max) + ') [' + str(stretch_index_dev) + ']', str(n_vertex), str(n_edge), str(lower_bound), str(total_trees) ]
        
#The main function that should be called from other tools. This should setup the variables to specify the dependencies.
def load(problem_name):
    if(problem_name == "tadmiss"):
        return {
            "read_function": TadmissLoader.tadmissReadSolution,
            "compare_function": TadmissLoader.tadmissCompare,
            "check_function": TadmissLoader.tadmissCheckSolution,
            "header_function": TadmissLoader.tadmissHeader,
            "entry_function": TadmissLoader.tadmissAddEntry,
            "in_extension": TadmissLoader.in_extension,
            "out_extension": TadmissLoader.out_extension,
            "err_extension": TadmissLoader.err_extension,
            "bks_extension": TadmissLoader.bks_extension,
        }
    else: #unknown problem
        return {}