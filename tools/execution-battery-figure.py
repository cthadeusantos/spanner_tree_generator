#Author: Victor Cracel
#Version: 0.2
#Date: 18 of june 2022
#Extends: analyze-execution-battery.py at version 3.0.
#Depends: Pyplot (pip3 install matplotlib) and PyYAML (pip3 install pyyaml).

#TODO: Make so the first number of the table will be read (refactor from the standard formart of # (#/#) [#])

#--Description--
#This script will transform a set of summary tables from any number of exectuion batterys into a figure using Pyplot.
#The idea is to select a column from the summary file to draw a line in a graphic.
#The user may choose several files and select one column for each. The script will draw a line for each choice. You may even select the same file multiple times if the user needs to draw information on multiple columns.
#The user has to input a YAML file that contains the path for each summary file generated by the analyze script ("result_summary.txt") and the respective column to be drawn.

#--Usage--
#python3 execution-battery-summary-to-figure.py < {INPUT_YAML} 
#{INPUT_YAML}: the YAML file passed by the user.

#--Input format--
#The expected input is a YAML file (see https://yaml.org/spec/). A copy of the original input will be stored inside the working folder for archiving purposes named "script_input.yaml".
#The yaml file should be passed to the stdin and should be formatted as follows:
#---
#output_figure: string             #Should point to the location where the figure will be saved. The extension of the figure must be 'png', 'svg', 'eps', or 'pdf'.
#graphic_name: string              #The title of the graphic. 
#x:                                #An object that should contain the following values:
#  name: string                    #The name of the X axis. The number of lines that will be read for each table is the range between the first and the last point of x.
#  min_value: integer              #An integer that will label the first point of the X axis.
#  max_value: integer              #An integer that will label the last point of the X axis.
#y:                                #An object that should contain the following values:
#  name: string                    #The name of the Y axis.
#  min_value: real                 #A real number that will label the first point of the Y axis.
#  max_value: real                 #A real number that will label the last point of the Y axis.
#lines:                            #A sequence that should contain the information of each line to be drawn:
#- file_name: string               #A path pointing to a "result_summary.txt" file generated by the analyze script.
#  name: string                    #The name that will be writen in the graphic legend. You may use math mode of LaTEX.
#  column_number: integer          #The number of the column in the summary table that has the values to represent the line.
#...

#--Warning--
#All values of the input format are required.
#The number of lines in each table must match the range of the X axis given by the user. For example, if 'x_min_value = 10' and 'x_max_value = 20', then each table must have 10 lines each.
#The extension of the figure must be 'png', 'svg', 'eps', or 'pdf'.
#Each expected value in the table should be a real number. Only the first number in the value field will be read in case of multiple values.

import matplotlib.pyplot as plt
import os
import yaml
import sys

#--Globals--
input_yaml = ""     #The configuration yaml from the input.
figure_path = ""    #The path to the output figure file.
graphic_name = ""   #Name of the graphic.
x_name = ""         #Name of the X axis.
x_min_value = ""    #Minimum value for X.
x_max_value = ""    #Maximum value for X.
y_name = ""         #Name of the Y axis.
y_min_value = ""    #Minimum value for Y.
y_max_value = ""    #Maximum value for Y.
draw_lines = ""     #List of lines to be drawn.
all_y_avg = []      #The average of each table line
all_y_min = []      #The minimum of each table line
all_y_max = []      #The maximum of each table line
all_y_desv = []     #The stddev of each table line
x_range = 0         #The number of lines that must be read from each table based on the range of Y given by the user.

#--Functions--
#This will parse the input yaml file
def parse_yaml():
    global input_yaml
    global figure_path
    global graphic_name
    global x_name
    global x_min_value
    global x_max_value
    global y_name
    global y_min_value
    global y_max_value
    global draw_lines
    global x_range
    input_yaml = yaml.load(sys.stdin, Loader = yaml.loader.SafeLoader)
    figure_path = input_yaml["output_figure"]
    graphic_name = input_yaml["graphic_name"]
    x_name = input_yaml["x"]["name"]
    x_min_value = input_yaml["x"]["min_value"]
    x_max_value = input_yaml["x"]["max_value"]
    y_name = input_yaml["y"]["name"]
    y_min_value = input_yaml["y"]["min_value"]
    y_max_value = input_yaml["y"]["max_value"]
    draw_lines = input_yaml["lines"].copy()
    x_range = x_max_value - x_min_value + 1
    sys.stderr.write("Figure output path: " + figure_path + "\n")
    sys.stderr.write("Graphic name: " + graphic_name + "\n")
    sys.stderr.write("X axis name: " + x_name + "\n")
    sys.stderr.write("Y axis name: " + y_name + "\n")
    sys.stderr.write("Number of lines to be read from each summary: " + str(x_range) + "\n")
    sys.stderr.write("Summary files to read:\n")
    for i in range(len(draw_lines)):
        sys.stderr.write(draw_lines[i]["filename"] + "\n")

#Will fetch the data to make the graphic
def fetch_data():
    global all_y_avg
    global all_y_min
    global all_y_max
    global all_y_desv
    global draw_lines
    global x_range
    for j in range(0, len(draw_lines)):
        file_path = draw_lines[j]["filename"]
        sys.stderr.write("Fetching the data from " + file_path + "\n")
        file = open(file_path, 'r')    
        lines = file.readlines()

        #Clean
        first = True
        number_lines = 0
        y = []
        y_aux = []
        y_avg = []
        y_min = []
        y_max = []
        y_desv = []

        sys.stderr.write("Processing the table\n")
        for i in range(0, len(lines)):
            if(lines[i][0] == "|"):
                if(first):
                    first = False
                else:
                    number_lines += 1
                    lines[i] = lines[i].replace(" ","")
                    lines[i] = lines[i].split("|")
                    esquerda = 0
                    direita = 0
                    column_number = draw_lines[j]["column_number"]
                    esquerda = (lines[i][column_number]).find("(")
                    direita = (lines[i][column_number]).find(")")            
                    y_avg.append(float(lines[i][column_number][0:esquerda]))
                    y_min.append(float(lines[i][column_number][esquerda+1:direita].split("/")[0]))
                    y_max.append(float(lines[i][column_number][esquerda+1:direita].split("/")[1]))
                    y_desv.append(float(lines[i][column_number][direita+2:-1]))
                    y.append(y_aux)
                    y_aux=[]
        
        sys.stderr.write("Appending " + str(number_lines) + " new lines to the data structure.\n")
        assert(x_range == number_lines) #The number of lines from the table must be equal to the range of the input
        all_y_avg.append(y_avg)
        all_y_min.append(y_min)
        all_y_max.append(y_max)
        all_y_desv.append(y_desv)
        file.close()

#Will save the figure to the path given in the json    
def save_figure():
    plt.rcParams['text.usetex'] = True
    for k in range(0, len(draw_lines)):
        line_name = draw_lines[k]["name"]
        sys.stderr.write("Drawing the line: " + line_name + "\n")
        plt.plot(range(x_min_value, x_max_value), all_y_avg[k], label = line_name, marker = '*')
        plt.xticks(range(x_min_value, x_max_value))
        plt.xlabel(x_name)
        plt.ylabel(y_name)
        plt.legend()
    plt.savefig(figure_path, format = figure_path.split('.')[-1])
    plt.close()

#--Main--
sys.stderr.write("Parsing the yaml input.\n")
parse_yaml()
sys.stderr.write("Parse success. Fetching the data.\n")
fetch_data()
sys.stderr.write("Data fetched. Making the figure.\n")
save_figure()
sys.stderr.write("Figure saved successfully at: " + figure_path + "\n")